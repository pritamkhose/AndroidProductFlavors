apply plugin: 'com.android.application'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.pritam.productflavors"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
//        https://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle
//        keystore information from your properties file
//        def keystoreProperties = new Properties()
//        def keystorePropertiesFile = rootProject.file('prodkey.properties')
//        if (keystorePropertiesFile.exists()) {
////            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//            keystorePropertiesFile.withReader('UTF-8') { reader ->
//                keystoreProperties.load(reader)
//            }
//        }
        release {
////            keyAlias keystoreProperties['keyAlias']
////            keyPassword keystoreProperties['keyPassword']
////            storePassword keystoreProperties['storePassword']
                if (System.getenv()["CI"]) { // CI=true is exported by Nevercode
//                   storeFile file(System.getenv()["NC_KEYSTORE_PATH"])
//                   storePassword System.getenv()["NC_KEYSTORE_PASSWORD"]
//                   keyAlias System.getenv()["NC_KEY_ALIAS"]
//                   keyPassword System.getenv()["NC_KEY_PASSWORD"]
                } else {
                    storeFile file('productflavors_prod.jks')
                    storePassword "productflavors_prod_pass"
                    keyAlias "productflavors_prod"
                    keyPassword "productflavors_prod_pass"
                }
        }
        stage {
            keyAlias 'productflavors_test'
            storePassword 'productflavors_test_pass'
            keyPassword 'productflavors_test_pass'
            storeFile file('productflavors_test.jks')
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

//    https://stackoverflow.com/questions/21414399/android-gradle-dynamically-change-versionname-at-build-time
//    def gitCommitCount = "git rev-list HEAD --count".execute().text.trim()
    def gitCommitCount = "pritam"

    buildTypes {
        debug {
            buildConfigField "String", "SERVER_URL", '"https://api.github.com/users/pritamkhose/"'
            buildConfigField "boolean", "LOGGER", "true"
            versionNameSuffix "-${gitCommitCount}"
            debuggable true
        }
        release {
            buildConfigField "String", "SERVER_URL", '"https://api.github.com/users/nkhose/"'
            buildConfigField "boolean", "LOGGER", "false"
            versionNameSuffix "-${gitCommitCount}"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexEnabled = true
        }
        stage {
            buildConfigField "String", "SERVER_URL", '"https://api.github.com/users/sandiparmal/"'
            buildConfigField "boolean", "LOGGER", "true"
            versionNameSuffix "-${gitCommitCount}"
            signingConfig signingConfigs.stage
            debuggable true
            minifyEnabled false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "APF"
            def SEP = "_"
//            def flavor = variant.productFlavors[0].name
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionCode + '-' + variant.versionName
            def date = new Date();
            def formattedDate = date.format('ddMMyy_HHmm')

            def newApkName = project + SEP + buildType + SEP + version + SEP + formattedDate + ".apk"

            outputFileName = new File(newApkName)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp 4.2.2
    implementation 'com.squareup.okhttp3:okhttp:3.12.2'

    // https://mvnrepository.com/artifact/org.conscrypt/conscrypt-android
    implementation group: 'org.conscrypt', name: 'conscrypt-android', version: '2.2.1'

}

//apply from: "../artifacts.gradle"
